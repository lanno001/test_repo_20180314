abstract: 'The MinION is a portable DNA sequencer that generates long error-prone
  reads. As both the hardware and analysis software are updated regularly, the most
  suitable pipeline for subsequent analyses of a dataset generated with a given combination
  of hardware and software for a given organism is not always clear. Here we present
  a benchmark for a selection of <i>de novo</i> assemblers available to MinION users,
  on a read set of <i>Homo sapiens</i> (NCBI taxID: 9606). This benchmark is based
  on a <a href=\>benchmarking routine</a>, designed to facilitate easy replication
  on a read set of choice and addition of other <i>de novo</i> assembly pipelines.'
assembly_quality: 'Produced assemblies were analyzed and compared on continuity and
  agreement with the reference genome. Quast (version: 4.6.3) was used to determine
  a wide array of quality metrics in both quality categories and produce synteny plots.
  To elucidate any bias in the occurence of certain sequences, 5-mers in the assemblies
  and the reference genomes were compared using Jellyfish (version: 2.2.6). Finally,
  results were summarized using MultiQC.'
authors: B. Honeydew
pipelines: '<h4>minimap2 miniasm</h4>Minimap2 is a fast all-vs-all mapper of reads
  that relies on sketches of sequences, composed of minimizers. Miniasm uses the found
  overlaps to construct an assembly graph. As a consensus step is lacking in this
  pipeline, post-assembly polishing is often required.<br>&zwnj;<br>&zwnj;<b>Included
  tools:</b><ul><li>miniasm (version: 0.2-r128) </li><li>minimap2 (version: 2.10-r761)
  </li></ul><br>&zwnj;<b>Used command:</b><pre><code>minimap2 -x ava-ont -t 4 {input.fastq}
  {input.fastq} | gzip -1 > minimap2.paf.gz

  miniasm -f {input.fastq} minimap2.paf.gz > minimap2_miniasm.gfa

  grep -Po ''(?<=S\t).+(?=\[M::main\])'' minimap2_miniasm.gfa | awk ''{{print ">"$1"\\n"$2}}''
  | fold > {output}

  </code></pre>'
readset_quality: 'Reads in this dataset were generated on a Minion with FLO-MIN106
  flowcell with SQK-LSK108 kit. The reads were basecalled using Albacore 2.2.7. Prior
  to assembly, the quality of the untreated readset was analysed using NanoPlot (version:
  1.13.0) and mapped using the mappy module (version: 2.1) in Python3.'
